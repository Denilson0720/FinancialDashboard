NEXT JS NOTES

BENEFITS OF OPTIMIZING FONTS
In normal web dev there is a thing called "cumulative layout shift".  what is this?
When a project has an external font from say google such as "Imperial", it has to fetch this font and then apply it after the web app has been built.
Meanwhile it fethces for this font there is a little gray area/time where another font/default font is seen, once "imperial" is applied the web app gets its desired font...
however there is a chance that certain elements may shift such as images, headers, titles because of this small change.
WHERE DOES NEXT JS COME IN?
Becuase next js allows us to optimize fonts in a way that the font is fetched and applied all the same time during build time, the user does not have to experience
this grey area of waiting for the font to be fethced and applied and so it rejects the possibility of "cumulative layout shift".
- next/font built in allows this to happen easily.

BENEFITS OF OPTIMZING IMAGES 
with regular images the developer has to make sure of many things:
-Ensure your image is responsive on different screen sizes.
-Specify image sizes for different devices.
-Prevent layout shift as the images load.
-Lazy load images that are outside the user's viewport.

WITH NEXTJS <Image/> component:
-Preventing layout shift automatically when images are loading.
-Resizing images to avoid shipping large images to devices with a smaller viewport.
-Lazy loading images by default (images load as they enter the viewport).
-Serving images in modern formats, like WebP and AVIF, when the browser supports it.

SIDENOTE: What is lazy loading of images?
load images as they come within the viewport, outisde of nextjs, devs have to figure this out on their own, whilst nextjs has it as default behavior.

PARTIAL RENDERING IN NEXT JS
Next js supports layout components for nested routes where partial re-renders occur meaning on navigation inside a nested route only the nested components/pages will re-render..
while the layout will not re-render
Possible throigh the <Link> components in NestJS
<Link/> component
Through the use of the link component the users experience feels similar to that of a react single page application where visiting other routes happen instantly without..
...any page refresh, this is becuase of CODE-SPLITTING and PRETFETCHING done by NextJS
- With code-splitting with routes means the if a route experiences an error the whoel app will not break.
- when a <Link/> component comes within the browsers viewport next js prefetches the code for that route and by the time the user clicks it, the transition happens near instant...
...making it seem just like a react single page application.

HOW TO FETCH DATA
APIs
You can use api endpoints through route handlers in nextjs, which run on the server
this helps avoid fetching data directly from the client as we are not exposing our api/databse keys to the clients browser which can lead to a lot of negatives.

RSC REACT SERVER COMPONENTS
-supports asynchronous javascript, you dont have to use hooks and states
-runs in the server, 
        -avoid sending critical key information to the browser
        -avoid sending high computational fetches to the client and keep in server and only send results to client
-since server components run on the server you can query a databse directly meaning you dont need an api layer.

ORM vs SQL
both are great at doing CRUD operations to a database however ORMs write SQL under the hood.


